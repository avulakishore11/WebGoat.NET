trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  sqlServerName: 'webgoatsqlserver.database.windows.net'
  sqlDatabaseName: 'webgoatdb'
  sqlAdminUser: 'sqlserver'
  sqlAdminPassword: '16Nf1a0101@.'

stages:
- stage: Build
  jobs:
  - job: Restore
    displayName: 'Restore NuGet Packages'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

  - job: Build
    displayName: 'Build Solution'
    dependsOn: Restore
    steps:
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(build.artifactStagingDirectory)'
        artifactName: 'webgoat'
        publishLocation: 'Container'

  - job: Test
    displayName: 'Test Solution'
    dependsOn: Build
    steps:
    - task: VSTest@2
      displayName: 'Run Tests'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: DatabaseSetup
  dependsOn: Build
  jobs:
  - job: Setup
    displayName: 'Setup SQL Database'
    steps:
    - script: |
        sqlcmd -S tcp:$(sqlServerName) -U $(sqlAdminUser) -P $(sqlAdminPassword) -d $(sqlDatabaseName) -Q "IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='SampleTable' AND xtype='U') CREATE TABLE SampleTable (Id INT PRIMARY KEY, Name NVARCHAR(50));"
     
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployWebGoat
    displayName: 'Deploy WebGoat Application'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: webgoat
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'webgoat-svcconnection'
              appType: 'webApp'
              appName: 'webgoat-webapp'
              package: '$(Pipeline.Workspace)/webgoat/webgoat.zip'
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: 'webgoat-svcconnection'
              appName: 'webgoat-webapp'
              appSettings: |
                [
                  {
                    "name": "SQLSERVER",
                    "value": "$(sqlServerName)"
                  },
                  {
                    "name": "DATABASE",
                    "value": "$(sqlDatabaseName)"
                  },
                  {
                    "name": "USERNAME",
                    "value": "$(sqlAdminUser)"
                  },
                  {
                    "name": "PASSWORD",
                    "value": "$(sqlAdminPassword)"
                  }
                ]
